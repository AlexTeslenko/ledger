#include<gtest/gtest.h>

#include"math/linalg/prototype.hpp"
#include"math/linalg/matrix.hpp"
#include"math/linalg/blas/base.hpp"
#include"math/linalg/blas/dgemm_tn_double_novector.hpp"


using namespace fetch;
using namespace fetch::math::linalg;

TEST(blas_DGEMM, blas_dgemm_tn_double_novector1) {

	Blas< double, Computes( _C <= _alpha * T(_A) * _B + _beta * _C ),platform::Parallelisation::NOT_PARALLEL> dgemm_tn_double_novector;
	// Compuing _C <= _alpha * T(_A) * _B + _beta * _C  

  double alpha = 1, beta = 0;

  Matrix< double > A = Matrix< double >(R"(
	0.3745401188473625 0.9507143064099162 0.7319939418114051;
 0.5986584841970366 0.15601864044243652 0.15599452033620265
	)");

  Matrix< double > B = Matrix< double >(R"(
	0.05808361216819946 0.8661761457749352 0.6011150117432088;
 0.7080725777960455 0.020584494295802447 0.9699098521619943
	)");

  Matrix< double > C = Matrix< double >(R"(
	0.8324426408004217 0.21233911067827616 0.18182496720710062;
 0.18340450985343382 0.3042422429595377 0.5247564316322378;
 0.43194501864211576 0.2912291401980419 0.6118528947223795
	)");

  Matrix< double > R = Matrix< double >(R"(
	0.4456482991294304 0.33674079873438223 0.8057864498423064;
 0.1656934419785827 0.8266976184734581 0.7228126579480724;
 0.15297229436215787 0.6372467595628419 0.591313169085288
	)");
  
	dgemm_tn_double_novector(alpha, A, B, beta, C);

	ASSERT_TRUE( R.AllClose(C) ); 
}

TEST(blas_DGEMM, blas_dgemm_tn_double_novector2) {

	Blas< double, Computes( _C <= _alpha * T(_A) * _B + _beta * _C ),platform::Parallelisation::NOT_PARALLEL> dgemm_tn_double_novector;
	// Compuing _C <= _alpha * T(_A) * _B + _beta * _C  

  double alpha = 0, beta = 1;

  Matrix< double > A = Matrix< double >(R"(
	0.13949386065204183 0.29214464853521815 0.3663618432936917;
 0.45606998421703593 0.7851759613930136 0.19967378215835974
	)");

  Matrix< double > B = Matrix< double >(R"(
	0.5142344384136116 0.5924145688620425 0.046450412719997725;
 0.6075448519014384 0.17052412368729153 0.06505159298527952
	)");

  Matrix< double > C = Matrix< double >(R"(
	0.9488855372533332 0.9656320330745594 0.8083973481164611;
 0.3046137691733707 0.09767211400638387 0.6842330265121569;
 0.4401524937396013 0.12203823484477883 0.4951769101112702
	)");

  Matrix< double > R = Matrix< double >(R"(
	0.9488855372533332 0.9656320330745594 0.8083973481164611;
 0.3046137691733707 0.09767211400638387 0.6842330265121569;
 0.4401524937396013 0.12203823484477883 0.4951769101112702
	)");
  
	dgemm_tn_double_novector(alpha, A, B, beta, C);

	ASSERT_TRUE( R.AllClose(C) ); 
}

TEST(blas_DGEMM, blas_dgemm_tn_double_novector3) {

	Blas< double, Computes( _C <= _alpha * T(_A) * _B + _beta * _C ),platform::Parallelisation::NOT_PARALLEL> dgemm_tn_double_novector;
	// Compuing _C <= _alpha * T(_A) * _B + _beta * _C  

  double alpha = 1, beta = 1;

  Matrix< double > A = Matrix< double >(R"(
	0.034388521115218396 0.9093204020787821 0.2587799816000169;
 0.662522284353982 0.31171107608941095 0.5200680211778108
	)");

  Matrix< double > B = Matrix< double >(R"(
	0.5467102793432796 0.18485445552552704 0.9695846277645586;
 0.7751328233611146 0.9394989415641891 0.8948273504276488
	)");

  Matrix< double > C = Matrix< double >(R"(
	0.5978999788110851 0.9218742350231168 0.0884925020519195;
 0.1959828624191452 0.045227288910538066 0.32533033076326434;
 0.388677289689482 0.2713490317738959 0.8287375091519293
	)");

  Matrix< double > R = Matrix< double >(R"(
	1.1302433056071457 1.5506700912834535 0.7146781438045392;
 0.9347351599342958 0.5061714427949007 1.4859210106475778;
 0.9332767593138604 0.8077890198114085 1.545017690717192
	)");
  
	dgemm_tn_double_novector(alpha, A, B, beta, C);

	ASSERT_TRUE( R.AllClose(C) ); 
}

TEST(blas_DGEMM, blas_dgemm_tn_double_novector4) {

	Blas< double, Computes( _C <= _alpha * T(_A) * _B + _beta * _C ),platform::Parallelisation::NOT_PARALLEL> dgemm_tn_double_novector;
	// Compuing _C <= _alpha * T(_A) * _B + _beta * _C  

  double alpha = 0.6157192006072585, beta = 0.39504171962334544;

  Matrix< double > A = Matrix< double >(R"(
	0.3567533266935893 0.28093450968738076 0.5426960831582485;
 0.14092422497476265 0.8021969807540397 0.07455064367977082
	)");

  Matrix< double > B = Matrix< double >(R"(
	0.9868869366005173 0.7722447692966574 0.1987156815341724;
 0.005522117123602399 0.8154614284548342 0.7068573438476171
	)");

  Matrix< double > C = Matrix< double >(R"(
	0.7290071680409873 0.7712703466859457 0.07404465173409036;
 0.3584657285442726 0.11586905952512971 0.8631034258755935;
 0.6232981268275579 0.3308980248526492 0.06355835028602363
	)");

  Matrix< double > R = Matrix< double >(R"(
	0.5052468572924166 0.5450725373125829 0.13423442376639388;
 0.31504496291250295 0.5821328204062983 0.7244717519638095;
 0.5762489308915969 0.4261944024004371 0.12395507824469491
	)");
  
	dgemm_tn_double_novector(alpha, A, B, beta, C);

	ASSERT_TRUE( R.AllClose(C) ); 
}

TEST(blas_DGEMM, blas_dgemm_tn_double_novector5) {

	Blas< double, Computes( _C <= _alpha * T(_A) * _B + _beta * _C ),platform::Parallelisation::NOT_PARALLEL> dgemm_tn_double_novector;
	// Compuing _C <= _alpha * T(_A) * _B + _beta * _C  

  double alpha = 0.8796424397015317, beta = 0.6527078382985105;

  Matrix< double > A = Matrix< double >(R"(
	0.3109823217156622 0.32518332202674705 0.7296061783380641 0.6375574713552131 0.8872127425763265;
 0.4722149251619493 0.1195942459383017 0.713244787222995 0.7607850486168974 0.5612771975694962;
 0.770967179954561 0.49379559636439074 0.5227328293819941 0.42754101835854963 0.02541912674409519
	)");

  Matrix< double > B = Matrix< double >(R"(
	0.10789142699330445 0.03142918568673425 0.6364104112637804 0.3143559810763267 0.5085706911647028;
 0.907566473926093 0.24929222914887494 0.41038292303562973 0.7555511385430487 0.22879816549162246;
 0.07697990982879299 0.289751452913768 0.16122128725400442 0.9296976523425731 0.808120379564417
	)");

  Matrix< double > C = Matrix< double >(R"(
	0.6334037565104235 0.8714605901877177 0.8036720768991145 0.18657005888603584 0.8925589984899778;
 0.5393422419156507 0.8074401551640625 0.8960912999234932 0.3180034749718639 0.11005192452767676;
 0.22793516254194168 0.4271077886262563 0.8180147659224931 0.8607305832563434 0.006952130531190703;
 0.5107473025775657 0.417411003148779 0.22210781047073025 0.1198653673336828 0.33761517140362796;
 0.9429097039125192 0.32320293202075523 0.5187906217433661 0.7030189588951778 0.363629602379294
	)");

  Matrix< double > R = Matrix< double >(R"(
	0.8721327561353281 0.8774601142517662 0.9784564955030697 1.1521080144591291 1.3647870699791476;
 0.5118081366725902 0.6880957406989175 0.8801288714717751 0.7807942295998159 0.5923935372809473;
 0.8228232838683324 0.5885865875874826 1.2739749664697322 1.6650817005794134 0.8460709339460541;
 1.0301881334765923 0.5658753426766756 0.8371534519601018 1.1098077358571763 0.9626185664356209;
 1.1494541730136651 0.36504550175061634 1.0415129249818693 1.0980197763643975 0.7652800428473888
	)");
  
	dgemm_tn_double_novector(alpha, A, B, beta, C);

	ASSERT_TRUE( R.AllClose(C) ); 
}

TEST(blas_DGEMM, blas_dgemm_tn_double_novector6) {

	Blas< double, Computes( _C <= _alpha * T(_A) * _B + _beta * _C ),platform::Parallelisation::NOT_PARALLEL> dgemm_tn_double_novector;
	// Compuing _C <= _alpha * T(_A) * _B + _beta * _C  

  double alpha = 0.9078751588535425, beta = 0.32226054949012006;

  Matrix< double > A = Matrix< double >(R"(
	0.9717820827209607 0.9624472949421112 0.25178229582536416;
 0.49724850589238545 0.30087830981676966 0.2848404943774676
	)");

  Matrix< double > B = Matrix< double >(R"(
	0.036886947354532795 0.6095643339798968 0.5026790232288615;
 0.05147875124998935 0.27864646423661144 0.9082658859666537
	)");

  Matrix< double > C = Matrix< double >(R"(
	0.23956189066697242 0.1448948720912231 0.489452760277563;
 0.9856504541106007 0.2420552715115004 0.6721355474058786;
 0.7616196153287176 0.23763754399239967 0.7282163486118596
	)");

  Matrix< double > R = Matrix< double >(R"(
	0.13298465226402295 0.7102782265036373 1.011250465957006;
 0.3639293400139033 0.6867462544373164 0.9039365064115786;
 0.26718421333196707 0.2879774886979866 0.5844584392062862
	)");
  
	dgemm_tn_double_novector(alpha, A, B, beta, C);

	ASSERT_TRUE( R.AllClose(C) ); 
}

TEST(blas_DGEMM, blas_dgemm_tn_double_novector7) {

	Blas< double, Computes( _C <= _alpha * T(_A) * _B + _beta * _C ),platform::Parallelisation::NOT_PARALLEL> dgemm_tn_double_novector;
	// Compuing _C <= _alpha * T(_A) * _B + _beta * _C  

  double alpha = 8.313295940194033, beta = -2.2232625863950544;

  Matrix< double > A = Matrix< double >(R"(
	0.3677831327192532 0.6323058305935795 0.6335297107608947 0.5357746840747585 0.0902897700544083 0.835302495589238 0.32078006497173583 0.18651851039985423 0.040775141554763916 0.5908929431882418;
 0.6775643618422824 0.016587828927856152 0.512093058299281 0.22649577519793795 0.6451727904094499 0.17436642900499144 0.690937738102466 0.3867353463005374 0.9367299887367345 0.13752094414599325;
 0.3410663510502585 0.11347352124058907 0.9246936182785628 0.877339353380981 0.2579416277151556 0.659984046034179 0.8172222002012158 0.5552008115994623 0.5296505783560065 0.24185229090045168;
 0.09310276780589921 0.8972157579533268 0.9004180571633305 0.6331014572732679 0.3390297910487007 0.3492095746126609 0.7259556788702394 0.8971102599525771 0.8870864242651173 0.7798755458576239;
 0.6420316461542878 0.08413996499504883 0.16162871409461377 0.8985541885270792 0.6064290596595899 0.009197051616629648 0.1014715428660321 0.6635017691080558 0.005061583846218687 0.16080805141749865;
 0.5487337893665861 0.6918951976926933 0.6519612595026005 0.22426930946055978 0.7121792213475359 0.23724908749680007 0.3253996981592677 0.7464914051180241 0.6496328990472147 0.8492234104941779;
 0.6576128923003434 0.5683086033354716 0.09367476782809248 0.3677158030594335 0.26520236768172545 0.24398964337908358 0.9730105547524456 0.3930977246667604 0.8920465551771133 0.6311386259972629;
 0.7948113035416484 0.5026370931051921 0.5769038846263591 0.4925176938188639 0.1952429877980445 0.7224521152615053 0.2807723624408558 0.02431596643145384 0.6454722959071678 0.17711067940704894;
 0.9404585843529143 0.9539285770025874 0.9148643902204485 0.3701587002554444 0.015456616528867428 0.9283185625877254 0.42818414831731433 0.9666548190436696 0.9636199770892528 0.8530094554673601;
 0.2944488920695857 0.38509772860192526 0.8511366715168569 0.31692200515627766 0.1694927466860925 0.5568012624583502 0.936154774160781 0.696029796674973 0.570061170089365 0.09717649377076854
	)");

  Matrix< double > B = Matrix< double >(R"(
	0.6150072266991697 0.9900538501042633 0.14008401523652403 0.5183296523637367 0.8773730719279554 0.7407686177542044 0.697015740995268 0.7024840839871093 0.35949115121975517 0.29359184426449336;
 0.8093611554785136 0.8101133946791808 0.8670723185801037 0.9132405525564713 0.5113423988609378 0.5015162946871996 0.7982951789667752 0.6499639307777652 0.7019668772577033 0.795792669436101;
 0.8900053418175663 0.3379951568515358 0.375582952639944 0.093981939840869 0.578280140996174 0.035942273796742086 0.46559801813246016 0.5426446347075766 0.2865412521282844 0.5908332605690108;
 0.03050024993904943 0.03734818874921442 0.8226005606596583 0.3601906414112629 0.12706051265188478 0.5222432600548044 0.7699935530986108 0.21582102749684318 0.6228904758190003 0.085347464993768;
 0.0516817211686077 0.531354631568148 0.5406351216101065 0.6374299014982066 0.7260913337226615 0.9758520794625346 0.5163003483011953 0.32295647294124596 0.7951861947687037 0.2708322512620742;
 0.4389714207056361 0.07845638134226596 0.02535074341545751 0.9626484146779251 0.8359801205122058 0.695974206093698 0.4089529444142699 0.17329432007084578 0.15643704267108605 0.25024289816459533;
 0.5492266647061205 0.7145959227000623 0.6601973767177313 0.27993389694594284 0.9548652806631941 0.7378969166957685 0.5543540525114007 0.6117207462343522 0.4196000624277899 0.24773098950115746;
 0.3559726786512616 0.7578461104643691 0.014393488629755868 0.11607264050691624 0.04600264202175275 0.040728802318970136 0.8554605840110072 0.7036578593800237 0.4741738290873252 0.09783416065100148;
 0.49161587511683236 0.4734717707805657 0.17320186991001518 0.43385164923797304 0.39850473439737344 0.6158500980522165 0.6350936508676438 0.04530400977204452 0.3746126146264712 0.6258599157142364;
 0.5031362585800877 0.8564898411883223 0.658693631618945 0.1629344270814297 0.07056874740042984 0.6424192782063156 0.026511310541621813 0.5857755812734633 0.9402302414249576 0.575474177875879
	)");

  Matrix< double > C = Matrix< double >(R"(
	0.3881699262065219 0.6432882184423532 0.45825289049151663 0.5456167893159349 0.9414648087765252 0.38610263780077425 0.9611905638239142 0.9053506419560637 0.19579113478929644 0.06936130087516545;
 0.10077800137742665 0.018221825651549728 0.0944429607559284 0.6830067734163568 0.07118864846022899 0.3189756302937613 0.8448753109694546 0.023271935735825866 0.8144684825889358 0.28185477477339993;
 0.11816482762165625 0.6967371653641506 0.628942846779884 0.877472013527053 0.7350710438038858 0.8034809303848486 0.2820345725713065 0.17743954377972282 0.7506147516408583 0.806834739267264;
 0.9905051420006733 0.4126176769114265 0.37201808579278317 0.7764129607419968 0.34080354025301784 0.9307573256035647 0.8584127518430118 0.42899402737501835 0.7508710677914974 0.7545428740846823;
 0.10312386883593261 0.9025529066795667 0.5052523724478571 0.8264574661077416 0.32004960103061175 0.8955232284962005 0.3892016787341631 0.01083765148029836 0.9053819764192637 0.09128667678613356;
 0.31931363759041487 0.9500619670508049 0.9506071469375561 0.5734378881232861 0.6318372121697993 0.44844552197831977 0.29321077169806453 0.32866454536991596 0.6725184560770384 0.75237452943768;
 0.7915790437258485 0.7896181427945539 0.09120610304869037 0.49442030470258147 0.057558760016644284 0.5495288823237355 0.441530501373377 0.8877041827582998 0.3509150125520787 0.11706701642760586;
 0.14299168205283586 0.7615106317174722 0.6182180633162611 0.10112267612279024 0.08410680611499743 0.70096913145912 0.07276300636419353 0.8218600592903562 0.7062422271564962 0.08134878064189976;
 0.08483771408519192 0.9866395785011755 0.3742707957561203 0.3706421470668909 0.8127995672575026 0.9472485773838587 0.9860010638228709 0.7533781852589416 0.37625958553091576 0.08350071669866876;
 0.7771469159274368 0.558404249735805 0.4242220092469763 0.906354385094736 0.11119748230615134 0.49262510429085915 0.011353644767419069 0.46866064199412627 0.05630327568183735 0.11881791626807192
	)");

  Matrix< double > R = Matrix< double >(R"(
	20.831670786849617 25.0537047218375 15.667247131936348 19.94286067883711 21.70923415758991 23.81153623566939 24.741473158008933 17.79778912555672 21.527704960618895 17.856977677768487;
 16.34022472821234 19.735427524506616 14.321428346408982 15.860028469900538 19.42349787827114 22.46581114788344 22.106479998379694 15.139840128024634 16.492717091903966 12.233958425502966;
 25.374617895674017 24.983535661729512 19.50052734771915 19.386760281821086 20.5609766330142 23.51843911631797 28.247870474019848 21.57292273546458 24.097449367235082 19.53529636666199;
 15.892303431615973 20.795990489686808 16.929616526400956 14.534948927386205 20.50147479405249 19.782510087356616 21.988312453795206 17.66206453275007 19.70764040210093 12.976669457556888;
 11.98809994206982 11.128126743332347 12.061182612362213 14.670386451653945 15.228251619776197 14.521444955588857 14.861924326885328 11.73732656831884 12.39473306608556 10.23637516034546;
 19.95033122201744 21.714950657684426 10.467511650459363 12.524267195355769 16.290249662106476 17.50231689971908 22.267707088977154 17.587940189725398 16.710686791501047 14.107151389053678;
 22.929983493725306 24.620369540448127 24.3086904751674 16.830425940347006 22.517328987788197 22.991955886566583 23.762388025908045 20.67414254384745 24.16220140839747 19.466873387047514;
 19.311181408725197 18.952244648479393 20.001919995344934 21.492586645512556 22.36758467452334 26.050996940584117 24.00445242285863 14.217566618079815 22.487070534809863 18.431941594843266;
 25.145034902519292 23.87822409687347 23.329570380271406 21.705608442194144 21.35571710902387 23.52856956027837 28.134210227423054 20.00628209338575 24.59825043362065 20.80775711198294;
 14.67242039351791 15.648699272476506 12.971816725836137 16.595544730859668 21.46698044812152 21.610925387718584 22.51018588242116 12.337494441285815 15.541058129768142 12.304754264597047
	)");
  
	dgemm_tn_double_novector(alpha, A, B, beta, C);

	ASSERT_TRUE( R.AllClose(C) ); 
}
