<?xml version='1.0' encoding='utf-8'?>
<index xmlns="http://jessevdk.github.com/cldoc/1.0">
  <namespace name="fetch" ref="fetch#fetch">
    <namespace name="rpc" ref="fetch::rpc#fetch::rpc">
      <namespace name="details" ref="fetch::rpc::details#fetch::rpc::details">
        <structtemplate name="Packer" ref="fetch::rpc::details::Packer#fetch::rpc::details::Packer">
          <brief> Argument packing routines for callables.</brief>
          <templatetypeparameter id="fetch::rpc::details::Packer::T" name="T">
            <brief>is the type of the argument that will be packed next.</brief>
          </templatetypeparameter>
          <templatetypeparameter id="fetch::rpc::details::Packer::arguments" name="arguments">
            <brief>are the arguments that remains to be pack</brief>
          </templatetypeparameter>
        </structtemplate>
        <class name="PromiseImplementation" ref="fetch::rpc::details::PromiseImplementation#fetch::rpc::details::PromiseImplementation" />
      </namespace>
      <namespace name="error" ref="fetch::rpc::error#fetch::rpc::error" />
      <class name="AbstractCallable" ref="fetch::rpc::AbstractCallable#fetch::rpc::AbstractCallable">
        <brief> Abstract class for callables.</brief>
      </class>
      <class name="AbstractPublicationFeed" ref="fetch::rpc::AbstractPublicationFeed#fetch::rpc::AbstractPublicationFeed">
        <brief> Super class for publishers.</brief>
      </class>
      <classtemplate name="CallableClassMember" ref="fetch::rpc::CallableClassMember#fetch::rpc::CallableClassMember">
        <brief> A member function wrapper that takes a serialized input.</brief>
        <templatetypeparameter id="fetch::rpc::CallableClassMember::C" name="C">
          <brief>is the class type to which the member function belongs.</brief>
        </templatetypeparameter>
        <templatetypeparameter id="fetch::rpc::CallableClassMember::F" name="F">
          <brief>is the function signature.</brief>
        </templatetypeparameter>
      </classtemplate>
      <class name="FeedSubscriptionManager" ref="fetch::rpc::FeedSubscriptionManager#fetch::rpc::FeedSubscriptionManager">
        <brief> This is a subscription manager that is used on the server side.</brief>
      </class>
      <classtemplate name="Function" ref="fetch::rpc::Function#fetch::rpc::Function">
        <brief> A function wrapper that takes a serialized input.</brief>
        <templatetypeparameter id="fetch::rpc::Function::F" name="F">
          <brief>is the function signature.</brief>
        </templatetypeparameter>
      </classtemplate>
      <class name="Function" ref="fetch::rpc::Function#fetch::rpc::Function">
        <brief>No function args, void return</brief>
      </class>
      <class name="HasPublicationFeed" ref="fetch::rpc::HasPublicationFeed#fetch::rpc::HasPublicationFeed">
        <brief> Publication functionality for a single feed.</brief>
      </class>
      <class name="Promise" ref="fetch::rpc::Promise#fetch::rpc::Promise" />
      <class name="Protocol" ref="fetch::rpc::Protocol#fetch::rpc::Protocol">
        <brief> A class that defines a generic protocol.</brief>
      </class>
      <class name="ServiceClient" ref="fetch::rpc::ServiceClient#fetch::rpc::ServiceClient" />
      <class name="ServiceServer" ref="fetch::rpc::ServiceServer#fetch::rpc::ServiceServer">
        <struct name="PendingMessage" ref="fetch::rpc::ServiceServer::PendingMessage#fetch::rpc::ServiceServer::PendingMessage" />
      </class>
    </namespace>
  </namespace>
  <report name="Documentation generator" ref="report" />
</index>
